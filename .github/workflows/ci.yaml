name: CI

on:
  pull_request:
    branches:
      - "*"

  push:
    branches:
      - main

permissions:
  contents: read

jobs:

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   # Pull requests from the same repository won't trigger this checks as they were already triggered by the push
  #   if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
  #   steps:
  #     - name: Clone the code
  #       uses: actions/checkout@v3
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: '1.17.8'
  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: v1.38.0
  build:
    name: Build
    runs-on: ubuntu-latest
    #needs: lint

    steps:

      - name: Checkout
        uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2

      - name: Set up Go 1.18
        id: go
        uses: actions/setup-go@bfdd3570ce990073878bf10f6b2d79082de49492 # v2
        with:
          go-version: '1.18.2'

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@e01797ad2ea9a981005ad58c99afa8d842e3d3eb # v1
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Prepare Host
        run: |
          sudo apt-get -qq update || true
          sudo apt-get install -y pigz
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Build images
        env:
          TAG: 1.0.0-dev
          ARCH: amd64
          REGISTRY: carina-controller
        run: |
          echo "building images..."
          go mod vendor
          docker buildx build -t ${REGISTRY}:${TAG} --platform=${ARCH} . 
          
          echo "creating images cache..."
          docker save \
            carina-controller:e2e | pigz > docker.tar.gz

      - name: cache
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2
        with:
          name: docker.tar.gz
          path: docker.tar.gz

  
  kubernetes:
    name: kubernetes
    runs-on: ubuntu-latest
    needs:
     # - lint
      - build
    strategy:
      matrix:
        k8s: [v1.19.11, v1.20.7, v1.21.2, v1.22.9, v1.23.6]

    steps:

      - name: Checkout
        uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2

      - name: cache
        uses: actions/download-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2
        with:
          name: docker.tar.gz

      - name: Create Kubernetes ${{ matrix.k8s }} cluster
        id: kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.14.0
          config: e2e/kind.yaml
          image: kindest/node:${{ matrix.k8s }}

      - name: Prepare cluster for testing
        id: local-path
        run: |
          kubectl version
          kubectl get nodes
          for n in `docker ps --filter name=worker --format "{{.Names}}"`; \
          do \
            for i in `seq 1 5`; \
            do \
              docker exec $$n truncate --size=200G /tmp/disk$$i.device && \
              sleep 2 &&\
              docker exec $$n losetup -f /tmp/disk$$i.device --show; \
            done \
          done
          
          echo "installing helm 3..."
          curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Load images from cache
        run: |
          echo "loading docker images..."
          pigz -dc docker.tar.gz | docker load
      - name: deploy
        run: |
          echo "deploy carina"
          helm install carina charts/  
      - name: Run e2e tests
        env:
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          make e2e

 